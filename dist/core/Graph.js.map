{"version":3,"sources":["../../src/core/Graph.js"],"names":["Graph","vertices","edges","data","vertex","_in","_out","push","from","to","edge","a","b","addEdge","index","indexOf","splice","edgesToRemove","concat","i","length","removeEdge","filter","incidentEdges","OUT","IN","direction","props","l","action","forEach","v","e"],"mappings":"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","file":"Graph.js","sourcesContent":["import { IN, OUT } from './constants.js';\nimport { propsMatch } from './utils.js';\n\nclass Graph {\n    constructor() {\n        this.vertices = [];\n        this.edges = [];\n    }\n\n    get vertexCount() {\n        return this.vertices.length;\n    }\n\n    get edgeCount() {\n        return this.edges.length;\n    }\n\n    addVertex(data) {\n        const vertex = {\n            _in: [],\n            _out: [],\n            data: data\n        };\n        this.vertices.push(vertex);\n        return vertex;\n    }\n\n    addEdge(from, to, data) {\n        const edge = {\n            from: from,\n            to: to,\n            data: data || {}\n        };\n        from._out.push(edge);\n        to._in.push(edge);\n        this.edges.push(edge);\n        return edge;\n    }\n\n    /**\n    Shortcut to add an edge and its reverse,\n    sharing the same data.\n    */\n    addEdgePair(a, b, data) {\n        return [\n            this.addEdge(a, b, data),\n            this.addEdge(b, a, data)\n        ];\n    }\n\n    removeEdge(edge) {\n        const index = this.edges.indexOf(edge);\n        if(index !== -1) {\n            // remove from extremity this.vertices first\n            edge.from._out.splice(edge.from._out.indexOf(edge), 1);\n            edge.to._in.splice(edge.to._in.indexOf(edge), 1);\n            this.edges.splice(index, 1);\n        }\n    }\n\n    removeVertex(vertex) {\n        const index = this.vertices.indexOf(vertex);\n        if(index !== -1) {\n            // remove all incident this.edges first\n            const edgesToRemove = vertex._in.concat(vertex._out);\n            for(let i = 0; i < edgesToRemove.length; i++) {\n                this.removeEdge(edgesToRemove[i]);\n            }\n            this.vertices.splice(index, 1);\n        }\n    }\n\n    outEdges(vertex, filter) {\n        return this.incidentEdges(vertex, OUT, filter);\n    }\n\n    inEdges(vertex, filter) {\n        return this.incidentEdges(vertex, IN, filter);\n    }\n\n    /**\n    Returns all this.edges incident to a vertex, in one direction (outgoing or incoming),\n    optionnaly filtered by a given function.\n    */\n    incidentEdges(vertex, direction, filter) {\n        if (!filter) {\n            return direction ? vertex._out : vertex._in;\n        }\n        const edges = direction ? vertex._out : vertex._in;\n        return edges.filter(filter);\n    }\n\n    vertex(props) {\n        const vertices = this.vertices;\n        for (let i = 0, l = vertices.length; i < l; i++) {\n            if (propsMatch(vertices[i].data, props)) {\n                return vertices[i];\n            }\n        }\n        return null;\n    }\n\n    edge(props) {\n        const edges = this.edges;\n        for (let i = 0, l = edges.length; i < l; i++) {\n            if (propsMatch(edges[i].data, props)) {\n                return edges[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n    Perform an action on each vertex of the graph\n    */\n    forEachVertex(action) {\n        this.vertices.forEach(v => action(v));\n    }\n\n    /**\n    Perform an action on each edge of the graph\n    */\n    forEachEdge(action) {\n        this.edges.forEach(e => action(e));\n    }\n};\n\nexport default Graph;\n"]}