{"version":3,"sources":["../../src/algos/nodeFlagger.js"],"names":["graph","flagKey","forEachVertex","v","flags","hasOwnProperty","key"],"mappings":";;;;;;;;;;;AAEI,oBAAYA,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AACxB,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKC,OAAL,GAAeA,OAAf;AACH;;;;mCAEUD,K,EAAO;AAAA;;AACd,iBAAKA,KAAL,CAAWE,aAAX,CAAyB,aAAK;AAC1B,uBAAOC,EAAE,MAAKF,OAAP,CAAP;AACH,aAFD;AAGH;;;iCAEQE,C,EAAG;AACR,mBAAOA,EAAE,KAAKF,OAAP,KAAmB,EAA1B;AACH;;;iCAEQE,C,EAAGC,K,EAAO;AACf,gBAAI,CAACD,EAAEE,cAAF,CAAiB,KAAKJ,OAAtB,CAAL,EAAqC;AACjCE,kBAAE,KAAKF,OAAP,IAAkB,EAAlB;AACH;AACD,iBAAK,IAAIK,GAAT,IAAgBF,KAAhB,EAAuB;AACnBD,kBAAE,KAAKF,OAAP,EAAgBK,GAAhB,IAAuBF,MAAME,GAAN,CAAvB;AACH;AACJ","file":"nodeFlagger.js","sourcesContent":["\nexport default class {\n    constructor(graph, flagKey) {\n        this.graph = graph;\n        this.flagKey = flagKey;\n    }\n\n    clearFlags(graph) {\n        this.graph.forEachVertex(v => {\n            delete v[this.flagKey];\n        });\n    }\n\n    getFlags(v) {\n        return v[this.flagKey] || {};\n    }\n\n    setFlags(v, flags) {\n        if (!v.hasOwnProperty(this.flagKey)) {\n            v[this.flagKey] = {};\n        }\n        for (let key in flags) {\n            v[this.flagKey][key] = flags[key];\n        }\n    }\n}\n"]}